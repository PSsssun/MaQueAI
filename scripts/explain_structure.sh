#!/bin/bash

echo "📦 MaQueAI Docker Project Structure"
echo "=================================="
echo ""

echo "🏠 Host directory structure:"
echo "/home/sunpeng/WorkSpace/MaQueAI/"
echo "├── 📁 docker_config/          # Docker configuration file"  
echo "│   └── 📄 Dockerfile-MaQueAI  # image build file"
echo "├── 📁 data/                   # data files (mapped to container /data)"
echo "│   └── 📄 Bright_Screen_Wall.bag"
echo "├── 📁 workspace/              # workspace (mapped to container /workspace) [optional]"
echo "│   └── 📁 catkin_ws/          # ROS workspace"
echo "└── 📁 scripts/                # useful scripts"
echo "    ├── 📄 build_docker.sh     # build Docker image"
echo "    ├── 📄 run_docker.sh       # run Docker container"
echo "    ├── 📄 run_docker_dev.sh   # run development mode (mount workspace)"
echo "    └── 📄 explain_structure.sh"
echo ""

echo "🐳 Docker container structure:"
echo "📁 /opt/dependencies/          # dependency library source code and compilation (pre-installed)"
echo "├── 📁 Sophus/                 # Sophus a621ff source code (fixed So2.cpp)"
echo "└── 📁 rpg_vikit/              # Vikit source code"
echo ""
echo "📁 /usr/local/                 # system library installation location"
echo "├── 📁 include/sophus/         # Sophus header files"
echo "├── 📁 include/vikit*/         # Vikit header files"  
echo "└── 📁 lib/libSophus.so        # Sophus library files"
echo ""

echo "📁 /workspace/catkin_ws/       # development workspace"
echo "├── 📁 src/"
echo "│   └── 📁 LIVO/               # FAST-LIVO2 (renamed, only cloned)"
echo "├── 📁 build/                  # compilation temporary files (initial empty)"
echo "└── 📁 devel/                  # compilation results (initial only basic environment)"
echo ""

echo "🔗 Running mode comparison:"
echo "Mode 1 - independent container mode (recommended for testing):"
echo "  command: ./scripts/run_docker.sh"
echo "  features: use pre-built environment in container, code modified in container"
echo "  scope: quick test, demo, learning"
echo ""
echo "Mode 2 - development mount mode (recommended for collaboration):"
echo "  command: ./scripts/run_docker_dev.sh"
echo "  features: mount host workspace, code modified synchronously"
echo "  scope: team collaboration development, IDE integration"
echo ""

echo "💡 pre-installed environment:"
echo "✅ Ubuntu 20.04 + ROS Noetic"
echo "✅ PCL 1.10, Eigen 3.3.7, OpenCV 4.2"
echo "✅ Sophus a621ff (fixed complex initialization problem)"
echo "✅ Vikit (rpg_vikit)"
echo "✅ LIVO source code (FAST-LIVO2 renamed, development ready)"
echo ""

echo "🛠️  container useful commands:"
echo "check_versions.sh       - check all library versions"
echo "check_projects.sh       - check project status"
echo "check_dependencies.sh   - check dependency details"
echo "build_livo.sh          - compile LIVO project"
echo "show_structure.sh      - show container structure"
echo ""

echo "🚀 development workflow:"
echo "1. build image:    ./scripts/build_docker.sh"
echo "2. start container:    ./scripts/run_docker.sh (or run_docker_dev.sh)"
echo "3. check environment:    check_versions.sh && check_projects.sh"
echo "4. compile project:    build_livo.sh"
echo "5. run algorithm:    roslaunch LIVO mapping_avia.launch"
echo "6. play data:    rosbag play /data/Bright_Screen_Wall.bag"
echo ""

echo "💡 Notes:"
echo "- /workspace in container is synchronized with host workspace directory"
echo "- Data files are placed in the host data directory, accessed through /data in the container"
echo "- After deleting the container, the contents of workspace and data directories will be retained on the host" 