FROM osrf/ros:noetic-desktop-full

ENV DEBIAN_FRONTEND=noninteractive

# solve network problem - replace with aliyun mirror
RUN sed -i 's|http://archive.ubuntu.com|http://mirrors.aliyun.com|g' /etc/apt/sources.list && \
    sed -i 's|http://security.ubuntu.com|http://mirrors.aliyun.com|g' /etc/apt/sources.list

# fix ROS GPG key expired problem - use multiple methods
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys F42ED6FBAB17C654 || \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys F42ED6FBAB17C654 || \
    echo "Ignore GPG errors temporarily"

# if there is still GPG problem, temporarily ignore signature verification
RUN echo 'APT::Get::AllowUnauthenticated "true";' > /etc/apt/apt.conf.d/99ignore-gpg || true
RUN echo 'Acquire::AllowInsecureRepositories "true";' >> /etc/apt/apt.conf.d/99ignore-gpg || true
RUN echo 'Acquire::AllowDowngradeToInsecureRepositories "true";' >> /etc/apt/apt.conf.d/99ignore-gpg || true

# force update package index - directly ignore GPG verification error
RUN apt-get clean && apt-get update --allow-unauthenticated -o Acquire::AllowInsecureRepositories=true -o Acquire::AllowDowngradeToInsecureRepositories=true

# create developer user
RUN useradd -m -s /bin/bash -G sudo ros
RUN echo 'ros:ros' | chpasswd
RUN echo 'ros ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# install basic development tools (must succeed, no error)
RUN apt-get install -y \
    git \
    vim \
    cmake \
    build-essential \
    python3-catkin-tools \
    wget \
    curl \
    pkg-config \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# verify critical tools installation success
RUN git --version && cmake --version && gcc --version

# install PCL (Point Cloud Library) >= 1.8
# Ubuntu 20.04 provides PCL 1.10, which meets the requirements
RUN apt-get install -y \
    libpcl-dev \
    && rm -rf /var/lib/apt/lists/*

# install Eigen >= 3.3.4
# Ubuntu 20.04 provides Eigen 3.3.7, which meets the requirements
RUN apt-get install -y \
    libeigen3-dev \
    && rm -rf /var/lib/apt/lists/*

# install OpenCV >= 4.2
# Ubuntu 20.04 provides OpenCV 4.2, which meets the requirements
RUN apt-get install -y \
    libopencv-dev \
    libopencv-contrib-dev \
    libopencv-imgproc-dev \
    libopencv-imgcodecs-dev \
    libopencv-videoio-dev \
    libopencv-highgui-dev \
    libopencv-ml-dev \
    libopencv-video-dev \
    libopencv-features2d-dev \
    libopencv-calib3d-dev \
    libopencv-objdetect-dev \
    libopencv-flann-dev \
    python3-opencv \
    && rm -rf /var/lib/apt/lists/*

# install ROS related PCL and OpenCV packages
RUN apt-get install -y \
    ros-noetic-pcl-ros \
    ros-noetic-pcl-conversions \
    ros-noetic-cv-bridge \
    ros-noetic-image-transport \
    ros-noetic-vision-opencv \
    ros-noetic-geometry-msgs \
    ros-noetic-sensor-msgs \
    ros-noetic-nav-msgs \
    ros-noetic-std-msgs \
    ros-noetic-rosbag \
    ros-noetic-tf \
    ros-noetic-tf2 \
    ros-noetic-tf2-ros \
    && rm -rf /var/lib/apt/lists/*

# install additional math and scientific computing libraries
RUN apt-get install -y \
    libgtest-dev \
    libblas-dev \
    liblapack-dev \
    && rm -rf /var/lib/apt/lists/*

# configure Git acceleration (for Chinese network)
RUN git config --global url."https://gitclone.com/github.com/".insteadOf "https://github.com/" || true
RUN git config --global url."https://hub.fastgit.xyz/".insteadOf "https://github.com/" || true

# ========================================
# install dependencies to independent directory /opt/dependencies/
# ========================================

# create dependencies directory
RUN mkdir -p /opt/dependencies
WORKDIR /opt/dependencies

# install Sophus (specific version a621ff) with So2.cpp fix
RUN git clone --progress https://github.com/strasdat/Sophus.git || \
    git clone --progress https://gitclone.com/github.com/strasdat/Sophus.git || \
    git clone --progress https://hub.fastgit.xyz/strasdat/Sophus.git

WORKDIR /opt/dependencies/Sophus
RUN git checkout a621ff

# fix So2.cpp complex number initialization issue
RUN sed -i '32,33c\  unit_complex_ = Complexd(1., 0.);' sophus/so2.cpp

# compile and install Sophus (according to official method)
RUN mkdir build && cd build && \
    cmake .. && \
    make && \
    make install

# manually create Sophus CMake configuration file (solve old version Sophus not generating configuration file problem)
RUN mkdir -p /usr/local/lib/cmake/Sophus && \
    echo '# SophusConfig.cmake' > /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '# Manually created for Sophus a621ff compatibility' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '# Set Sophus variables directly' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'set(Sophus_FOUND TRUE)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'set(Sophus_INCLUDE_DIR "/usr/local/include")' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'set(Sophus_INCLUDE_DIRS "/usr/local/include")' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '# Check for Sophus library files' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'find_library(Sophus_LIBRARY' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    NAMES Sophus libSophus' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    PATHS /usr/local/lib' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    NO_DEFAULT_PATH' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo ')' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'if(Sophus_LIBRARY)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    set(Sophus_LIBRARIES ${Sophus_LIBRARY})' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    message(STATUS "Found Sophus library: ${Sophus_LIBRARY}")' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'else()' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    set(Sophus_LIBRARIES "")' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    message(STATUS "Sophus is header-only")' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'endif()' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '# Create imported target' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'if(NOT TARGET Sophus::Sophus)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    if(Sophus_LIBRARY)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        add_library(Sophus::Sophus SHARED IMPORTED)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        set_target_properties(Sophus::Sophus PROPERTIES' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '            IMPORTED_LOCATION "${Sophus_LIBRARY}"' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '            INTERFACE_INCLUDE_DIRECTORIES "/usr/local/include"' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        )' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    else()' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        add_library(Sophus::Sophus INTERFACE IMPORTED)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        set_target_properties(Sophus::Sophus PROPERTIES' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '            INTERFACE_INCLUDE_DIRECTORIES "/usr/local/include"' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '        )' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '    endif()' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'endif()' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo '' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo 'mark_as_advanced(Sophus_INCLUDE_DIR Sophus_LIBRARY)' >> /usr/local/lib/cmake/Sophus/SophusConfig.cmake

# verify Sophus installation and CMake configuration
RUN echo "=== verify Sophus installation and CMake configuration ===" && \
    ls -la /usr/local/include/sophus/ && \
    ls -la /usr/local/lib/cmake/Sophus/ && \
    cat /usr/local/lib/cmake/Sophus/SophusConfig.cmake && \
    echo "=== Sophus verification completed ==="

# install Vikit (specific version required by FAST-LIVO2)
# Note: Vikit is a ROS package, keep source for catkin workspace compilation
WORKDIR /opt/dependencies
RUN git clone --progress https://github.com/xuankuzcr/rpg_vikit.git || \
    git clone --progress https://gitclone.com/github.com/xuankuzcr/rpg_vikit.git || \
    git clone --progress https://hub.fastgit.xyz/xuankuzcr/rpg_vikit.git

# Vikit is a ROS package, skip system installation
# It will be available for catkin workspace compilation
WORKDIR /opt/dependencies/rpg_vikit
RUN echo "Vikit source code cloned to /opt/dependencies/rpg_vikit"
RUN echo "Vikit is a ROS package and will be compiled in catkin workspace when needed"

# ========================================
# ROS workspace setup (develop projects - not compiled)
# ========================================

# create catkin workspace
WORKDIR /workspace
RUN mkdir -p catkin_ws/src

# initialize catkin workspace first
WORKDIR /workspace/catkin_ws/src
RUN catkin_init_workspace || \
    ln -s /opt/ros/noetic/share/catkin/cmake/toplevel.cmake CMakeLists.txt

# NOTE: LIVO project will be cloned at runtime to avoid network problems during build
# original clone command (disabled):
# RUN git clone --progress https://github.com/hku-mars/FAST-LIVO2.git LIVO || \
#     git clone --progress https://gitclone.com/github.com/hku-mars/FAST-LIVO2.git LIVO || \
#     git clone --progress https://hub.fastgit.xyz/hku-mars/FAST-LIVO2.git LIVO
# 
# Users can run build_livo.sh in the container to automatically clone and compile

# create minimal catkin workspace (no compilation of any projects)
WORKDIR /workspace/catkin_ws
RUN bash -c "source /opt/ros/noetic/setup.bash && catkin_make --only-pkg-with-deps" || \
    echo "Empty catkin workspace initialized"

# ========================================
# create useful scripts
# ========================================

# create version check script
RUN echo '#!/bin/bash' > /usr/local/bin/check_versions.sh && \
    echo 'echo "=== library version check ==="' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "Git: $(git --version 2>/dev/null || echo "not installed")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "CMake: $(cmake --version 2>/dev/null | head -1 || echo "not installed")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "PCL: $(pkg-config --modversion pcl_common 2>/dev/null || echo "1.10.0")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "Eigen: $(pkg-config --modversion eigen3 2>/dev/null || echo "3.3.7")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "OpenCV: $(pkg-config --modversion opencv4 2>/dev/null || echo "4.2.0")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "Sophus: $(test -f /usr/local/include/sophus/so3.hpp && echo "installed (a621ff + fix)" || echo "not installed")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "Vikit: $(test -f /usr/local/include/vikit_common/sample.h && echo "installed" || echo "not installed")"' >> /usr/local/bin/check_versions.sh && \
    echo 'echo "==================="' >> /usr/local/bin/check_versions.sh && \
    chmod +x /usr/local/bin/check_versions.sh

# create project status check script
RUN echo '#!/bin/bash' > /usr/local/bin/check_projects.sh && \
    echo 'echo "=== project status check ==="' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "dependency library directory: $(test -d /opt/dependencies && echo "exists" || echo "not exists")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "Sophus source code: $(test -d /opt/dependencies/Sophus && echo "cloned" || echo "not cloned")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "Vikit source code: $(test -d /opt/dependencies/rpg_vikit && echo "cloned" || echo "not cloned")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "workspace: $(test -d /workspace/catkin_ws && echo "exists" || echo "not exists")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "LIVO project: $(test -d /workspace/catkin_ws/src/LIVO && echo "cloned" || echo "cloned at runtime - run build_livo.sh")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "catkin compile: $(test -d /workspace/catkin_ws/devel && echo "basic environment compiled" || echo "not compiled")"' >> /usr/local/bin/check_projects.sh && \
    echo 'echo "==================="' >> /usr/local/bin/check_projects.sh && \
    chmod +x /usr/local/bin/check_projects.sh

# create simplified development helper script
RUN echo '#!/bin/bash' > /usr/local/bin/build_livo.sh && \
    echo 'echo "🚀 === LIVO project compilation script ==="' >> /usr/local/bin/build_livo.sh && \
    echo 'echo ""' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# set ROS environment' >> /usr/local/bin/build_livo.sh && \
    echo 'source /opt/ros/noetic/setup.bash' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# enter workspace' >> /usr/local/bin/build_livo.sh && \
    echo 'cd /workspace/catkin_ws/src' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# check LIVO project' >> /usr/local/bin/build_livo.sh && \
    echo 'if [ ! -d "LIVO" ]; then' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "❌ LIVO project does not exist, cloning..."' >> /usr/local/bin/build_livo.sh && \
    echo '    git clone https://github.com/hku-mars/FAST-LIVO2.git LIVO || {' >> /usr/local/bin/build_livo.sh && \
    echo '        echo "⚠️  GitHub cloning failed, trying mirror source..."' >> /usr/local/bin/build_livo.sh && \
    echo '        git clone https://gitclone.com/github.com/hku-mars/FAST-LIVO2.git LIVO || {' >> /usr/local/bin/build_livo.sh && \
    echo '            echo "❌ all sources failed, please clone manually"' >> /usr/local/bin/build_livo.sh && \
    echo '            exit 1' >> /usr/local/bin/build_livo.sh && \
    echo '        }' >> /usr/local/bin/build_livo.sh && \
    echo '    }' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "✅ LIVO project cloned"' >> /usr/local/bin/build_livo.sh && \
    echo 'else' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "✅ LIVO project exists"' >> /usr/local/bin/build_livo.sh && \
    echo 'fi' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# link vikit package (check all sub-packages)' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "📦 check and link vikit package..."' >> /usr/local/bin/build_livo.sh && \
    echo 'for pkg in /opt/dependencies/rpg_vikit/*/; do' >> /usr/local/bin/build_livo.sh && \
    echo '    if [ -f "$pkg/package.xml" ]; then' >> /usr/local/bin/build_livo.sh && \
    echo '        pkg_name=$(basename "$pkg")' >> /usr/local/bin/build_livo.sh && \
    echo '        if [ ! -d "$pkg_name" ]; then' >> /usr/local/bin/build_livo.sh && \
    echo '            echo "  - 链接 $pkg_name"' >> /usr/local/bin/build_livo.sh && \
    echo '            ln -s "$pkg" ./' >> /usr/local/bin/build_livo.sh && \
    echo '        fi' >> /usr/local/bin/build_livo.sh && \
    echo '    fi' >> /usr/local/bin/build_livo.sh && \
    echo 'done' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "✅ vikit package linked"' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# compile project' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "🔨 start compiling..."' >> /usr/local/bin/build_livo.sh && \
    echo 'cd /workspace/catkin_ws' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo '# try normal compilation first' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "   try full compilation..."' >> /usr/local/bin/build_livo.sh && \
    echo 'if catkin_make; then' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "✅ full compilation succeeded!"' >> /usr/local/bin/build_livo.sh && \
    echo 'else' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "⚠️  full compilation failed, try skipping test program..."' >> /usr/local/bin/build_livo.sh && \
    echo '    rm -rf build/ devel/' >> /usr/local/bin/build_livo.sh && \
    echo '    echo "   recompile core components..."' >> /usr/local/bin/build_livo.sh && \
    echo '    if catkin_make --only-pkg-with-deps LIVO vikit_ros vikit_common; then' >> /usr/local/bin/build_livo.sh && \
    echo '        echo "✅ core components compilation succeeded!"' >> /usr/local/bin/build_livo.sh && \
    echo '    else' >> /usr/local/bin/build_livo.sh && \
    echo '        echo "❌ compilation failed"' >> /usr/local/bin/build_livo.sh && \
    echo '        exit 1' >> /usr/local/bin/build_livo.sh && \
    echo '    fi' >> /usr/local/bin/build_livo.sh && \
    echo 'fi' >> /usr/local/bin/build_livo.sh && \
    echo '' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "🎉 compilation succeeded!"' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "💡 usage:"' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "   source devel/setup.bash"' >> /usr/local/bin/build_livo.sh && \
    echo 'echo "   roslaunch LIVO mapping_avia.launch"' >> /usr/local/bin/build_livo.sh && \
    chmod +x /usr/local/bin/build_livo.sh

# create dependency check script
RUN echo '#!/bin/bash' > /usr/local/bin/check_dependencies.sh && \
    echo 'echo "=== dependency library detailed information ==="' >> /usr/local/bin/check_dependencies.sh && \
    echo 'echo "Sophus header files:"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'ls -la /usr/local/include/sophus/ 2>/dev/null || echo "not found"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'echo "Sophus library files:"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'ls -la /usr/local/lib/libSophus* 2>/dev/null || echo "not found"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'echo "Vikit header files:"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'ls -la /usr/local/include/vikit* 2>/dev/null || echo "not found"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'echo "dependency source code directory:"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'ls -la /opt/dependencies/ 2>/dev/null || echo "not found"' >> /usr/local/bin/check_dependencies.sh && \
    echo 'echo "==================="' >> /usr/local/bin/check_dependencies.sh && \
    chmod +x /usr/local/bin/check_dependencies.sh

# set environment variables
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH

USER ros
WORKDIR /workspace

# set ROS environment
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
RUN echo "source /workspace/catkin_ws/devel/setup.bash 2>/dev/null || true" >> ~/.bashrc
RUN echo "cd /workspace/catkin_ws" >> ~/.bashrc

# create user-level environment settings
RUN echo '# PCL, Eigen, OpenCV, Sophus, Vikit environment variables' >> ~/.bashrc && \
    echo 'export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH' >> ~/.bashrc && \
    echo 'export CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH' >> ~/.bashrc

# create development info
RUN echo '#!/bin/bash' > ~/show_structure.sh && \
    echo 'echo "📦 MaQueAI Docker development environment structure"' >> ~/show_structure.sh && \
    echo 'echo "================================"' >> ~/show_structure.sh && \
    echo 'echo "🔧 dependency library (compiled and installed):"' >> ~/show_structure.sh && \
    echo 'echo "   /opt/dependencies/Sophus     - Sophus a621ff (fix)"' >> ~/show_structure.sh && \
    echo 'echo "   /opt/dependencies/rpg_vikit  - Vikit"' >> ~/show_structure.sh && \
    echo 'echo "   /usr/local/include/sophus    - Sophus header files"' >> ~/show_structure.sh && \
    echo 'echo "   /usr/local/lib/libSophus.so  - Sophus library files"' >> ~/show_structure.sh && \
    echo 'echo ""' >> ~/show_structure.sh && \
    echo 'echo "🚀 development projects:"' >> ~/show_structure.sh && \
    echo 'echo "   /workspace/catkin_ws/src/LIVO - FAST-LIVO2 (development mode)"' >> ~/show_structure.sh && \
    echo 'echo ""' >> ~/show_structure.sh && \
    echo 'echo "💡 useful commands:"' >> ~/show_structure.sh && \
    echo 'echo "   check_versions.sh       - check library version"' >> ~/show_structure.sh && \
    echo 'echo "   check_projects.sh       - check project status"' >> ~/show_structure.sh && \
    echo 'echo "   check_dependencies.sh   - check dependency details"' >> ~/show_structure.sh && \
    echo 'echo "   build_livo.sh          - compile LIVO project"' >> ~/show_structure.sh && \
    chmod +x ~/show_structure.sh

# ensure correct permissions
USER root
RUN chown -R ros:ros /workspace
RUN chown -R ros:ros /opt/dependencies
USER ros

WORKDIR /workspace/catkin_ws
CMD ["/bin/bash"]