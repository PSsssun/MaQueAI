#!/bin/bash

echo "📦 MaQueAI Docker Project Structure"
echo "=================================="
echo ""

echo "🏠 Host directory structure:"
echo "/home/sunpeng/WorkSpace/MaQueAI/"
echo "├── 📁 docker_config/          # Docker configuration files"
echo "│   ├── 📄 Dockerfile-MaQueAI  # Image build file"
echo "│   └── 📁 .devcontainer/      # VS Code dev container configuration"
echo "├── 📁 data/                   # Data files (mapped to container /data)"
echo "│   └── (Place your data files here)"
echo "├── 📁 workspace/              # Workspace (mapped to container /workspace) [created at runtime]"
echo "│   └── 📁 catkin_ws/          # ROS workspace"
echo "├── 📁 scripts/                # Utility scripts"
echo "│   ├── 📄 build_docker.sh     # Build Docker image"
echo "│   ├── 📄 run_docker.sh       # Run Docker container"
echo "│   ├── 📄 run_docker_dev.sh   # Run development mode (mount workspace)"
echo "│   ├── 📄 build_livo.sh       # Compile LIVO project"
echo "│   ├── 📄 watch_docker_build.sh      # Monitor Docker build process"
echo "│   ├── 📄 show_build_progress.sh     # Show build progress"
echo "│   ├── 📄 setup_collaborative_workspace.sh  # Setup collaborative workspace"
echo "│   └── 📄 explain_structure.sh       # Project structure explanation (this script)"
echo "├── 📄 README.md               # Project documentation"
echo "└── 📄 .gitignore              # Git ignore configuration"
echo ""

echo "🐳 Docker container internal structure:"
echo "📁 /opt/dependencies/          # Dependency library source code and compilation (pre-installed)"
echo "├── 📁 Sophus/                 # Sophus a621ff source code (fixed So2.cpp)"
echo "└── 📁 rpg_vikit/              # Vikit source code"
echo ""
echo "📁 /usr/local/                 # System library installation location"
echo "├── 📁 include/sophus/         # Sophus header files"
echo "├── 📁 include/vikit*/         # Vikit header files"
echo "└── 📁 lib/libSophus.so        # Sophus library files"
echo ""

echo "📁 /workspace/catkin_ws/       # Development workspace"
echo "├── 📁 src/"
echo "│   └── 📁 LIVO/               # FAST-LIVO2 (renamed, cloned only)"
echo "├── 📁 build/                  # Compilation intermediate files (initially empty)"
echo "└── 📁 devel/                  # Compilation results (initially basic environment only)"
echo ""

echo "🔗 Running mode comparison:"
echo "Mode 1 - Independent container mode (recommended for testing):"
echo "  Command: ./scripts/run_docker.sh"
echo "  Features: Use pre-built environment in container, code modified inside container"
echo "  Scope: Quick testing, demo, learning"
echo ""
echo "Mode 2 - Development mount mode (recommended for collaborative development):"
echo "  Command: ./scripts/run_docker_dev.sh"
echo "  Features: Mount host workspace, code modified synchronously"
echo "  Scope: Team collaborative development, IDE integration"
echo ""

echo "💡 Pre-installed environment:"
echo "✅ Ubuntu 20.04 + ROS Noetic"
echo "✅ PCL 1.10, Eigen 3.3.7, OpenCV 4.2"
echo "✅ Sophus a621ff (fixed complex initialization issue)"
echo "✅ Vikit (rpg_vikit)"
echo "✅ LIVO source code (FAST-LIVO2 renamed, development ready)"
echo ""

echo "🛠️  Container utility commands:"
echo "check_versions.sh       - Check all library versions"
echo "check_projects.sh       - Check project status"
echo "check_dependencies.sh   - Check dependency details"
echo "build_livo.sh          - Compile LIVO project"
echo "show_structure.sh      - Show container structure"
echo ""

echo "🚀 Development workflow:"
echo "1. Build image:    ./scripts/build_docker.sh"
echo "2. Start container:    ./scripts/run_docker.sh (or run_docker_dev.sh)"
echo "3. Check environment:    check_versions.sh && check_projects.sh"
echo "4. Compile project:    build_livo.sh"
echo "5. Run algorithm:    roslaunch LIVO mapping_avia.launch"
echo "6. Play data:    rosbag play /data/your_bag_file.bag"
echo ""

echo "🔧 Advanced features:"
echo "- Monitor build:     ./scripts/watch_docker_build.sh"
echo "- Build progress:    ./scripts/show_build_progress.sh"
echo "- Collaborative setup:    ./scripts/setup_collaborative_workspace.sh"
echo ""

echo "💡 Important notes:"
echo "- /workspace in container is synchronized with host workspace directory"
echo "- Data files are placed in host data directory, accessed through /data in container"
echo "- After deleting the container, workspace and data directory contents are retained on host"
echo "- Supports VS Code dev container integration (.devcontainer configuration)"
echo "- Necessary directory structure is automatically created on first run"
